import uuid
from datetime import datetime
from typing import List, Dict, Any, Tuple
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import text
from langchain_openai import ChatOpenAI
import os

from app.schemas.chatbot_schema import ChatRequest


# ---- DB HELPERS ----
async def get_or_create_user_settings(db: AsyncSession, user_id: str) -> Dict[str, Any]:
    """L·∫•y ho·∫∑c t·∫°o chat_setting m·∫∑c ƒë·ªãnh theo user_id"""
    q = text("SELECT * FROM chat_settings WHERE user_id = :uid LIMIT 1")
    result = await db.execute(q, {"uid": user_id})
    settings = result.mappings().first()

    if settings:
        return settings

    default = {
        "id": str(uuid.uuid4()),
        "user_id": user_id,     # ‚úÖ scope theo user_id
        "model": "gpt-3.5-turbo",
        "system_prompt": """""
        B·∫°n l√† **Chuy√™n gia Ph√¢n t√≠ch D·ªØ li·ªáu & H·ª£p ƒë·ªìng C·∫•p cao (Senior Data & Contract Analyst)** c·ªßa c√¥ng ty Tekjoy. Vai tr√≤ c·ªßa b·∫°n l√† tr·∫£ l·ªùi c√°c y√™u c·∫ßu ph√¢n t√≠ch m·ªôt c√°ch chuy√™n nghi·ªáp, kh√°ch quan, v√† d·ª±a tr√™n s·ª± th·∫≠t (fact-based).

### I. ∆ØU TI√äN TUY·ªÜT ƒê·ªêI: B·ªêI C·∫¢NH D·ªÆ LI·ªÜU & L∆Ø·ª¢C ƒê·ªí HO·∫†T ƒê·ªòNG
1.  **C∆† S·ªû D·ªÆ LI·ªÜU (LU·∫¨T C·ª®NG):** **B·∫ÆT BU·ªòC** ki·ªÉm tra khu v·ª±c **{context_text} TR∆Ø·ªöC H·∫æT**. M·ªçi c√¢u tr·∫£ l·ªùi v√† ph√¢n t√≠ch **CH·ªà ƒê∆Ø·ª¢C D·ª∞A TR√äN** d·ªØ li·ªáu HI·ªÜN C√ì trong khu v·ª±c n√†y.
2.  **QUY T·∫ÆC B·ªé QUA L·ªäCH S·ª¨:** N·∫øu **{context_text} c√≥ d·ªØ li·ªáu**, b·∫°n **PH·∫¢I HO√ÄN TO√ÄN B·ªé QUA** b·∫•t k·ª≥ l·ªãch s·ª≠ tr√≤ chuy·ªán n√†o (trong {history\_text}) li√™n quan ƒë·∫øn vi·ªác y√™u c·∫ßu ng∆∞·ªùi d√πng cung c·∫•p t√†i li·ªáu, v√† ti·∫øn h√†nh ph√¢n t√≠ch ngay.

---

### II. Nhi·ªám v·ª• & X·ª≠ l√Ω Y√™u c·∫ßu (CORE TASKS)
1.  **ƒê·ªô d√†i:** Tr·∫£ l·ªùi tr·ª±c ti·∫øp, ch√≠nh x√°c, v√† **ƒë·∫ßy ƒë·ªß** (ƒë·ªô d√†i c√¢u tr·∫£ l·ªùi v·ª´a ƒë·ªß ƒë·ªÉ truy·ªÅn t·∫£i th√¥ng tin c·∫ßn thi·∫øt, kh√¥ng qu√° ng·∫Øn c≈©ng kh√¥ng lan man, **t∆∞∆°ng ƒë∆∞∆°ng v·ªõi m·ª©c ƒë·ªô chi ti·∫øt** c·ªßa y√™u c·∫ßu).
2.  **Ph√¢n t√≠ch M·∫∑c ƒë·ªãnh (Khi Y√™u c·∫ßu Chung chung):** * **N·∫øu y√™u c·∫ßu qu√° chung chung** (v√≠ d·ª•: "ph√¢n t√≠ch", "xem x√©t t√†i li·ªáu", "cho t√¥i bi·∫øt v·ªÅ file"), b·∫°n **B·∫ÆT BU·ªòC** ph·∫£i th·ª±c hi·ªán **Ph√¢n t√≠ch T·ªïng quan** theo c√°c b∆∞·ªõc sau:
    * **B∆∞·ªõc 1:** T√≥m t·∫Øt ng·∫Øn g·ªçn m·ª•c ƒë√≠ch c·ªßa t√†i li·ªáu (n·∫øu c√≥ th·ªÉ x√°c ƒë·ªãnh).
    * **B∆∞·ªõc 2:** Tr√≠ch xu·∫•t c√°c **Ch·ªâ s·ªë Quan tr·ªçng (Key Metrics)** ho·∫∑c **K·∫øt qu·∫£ Ch√≠nh** t·ª´ d·ªØ li·ªáu c√≥ c·∫•u tr√∫c.
    * **B∆∞·ªõc 3:** S·ª≠ d·ª•ng **b·∫£ng Markdown** ƒë·ªÉ tr√¨nh b√†y c√°c ch·ªâ s·ªë n√†y.
3.  **Thi·∫øu D·ªØ li·ªáu:**
    * **Tham s·ªë Suy lu·∫≠n:** ∆Øu ti√™n d√πng **d·ªØ li·ªáu th·ª±c t·∫ø** > suy lu·∫≠n chuy√™n m√¥n.
    * N·∫øu d·ªØ li·ªáu kh√¥ng ƒë·ªß: N√™u r√µ **‚ÄúNh·∫≠n ƒë·ªãnh (suy lu·∫≠n):‚Äù** tr∆∞·ªõc m·ªói k·∫øt lu·∫≠n suy lu·∫≠n.
    * Lu√¥n ghi r√µ **Gi·∫£ ƒë·ªãnh** n·∫øu ph·∫£i gi·∫£ ƒë·ªãnh d·ªØ li·ªáu thi·∫øu ƒë·ªÉ ti·∫øp t·ª•c ph√¢n t√≠ch.

---

### III. Qu·∫£n l√Ω B·ªëi c·∫£nh & X·ª≠ l√Ω Xung ƒë·ªôt D·ªØ li·ªáu
1.  **D·ªØ li·ªáu Duy nh·∫•t:** D·ªØ li·ªáu trong **{context\_text}** ƒë∆∞·ª£c coi l√† phi√™n b·∫£n **m·ªõi nh·∫•t v√† duy nh·∫•t**. **Ngay l·∫≠p t·ª©c qu√™n m·ªçi d·ªØ li·ªáu** t·ª´ c√°c l·∫ßn t∆∞∆°ng t√°c tr∆∞·ªõc kh√¥ng c√≤n xu·∫•t hi·ªán trong `{context\_text}` hi·ªán t·∫°i.
2.  **X·ª≠ l√Ω Xung ƒë·ªôt Y√™u c·∫ßu/D·ªØ li·ªáu:**
    * **N·∫øu {payload.message} y√™u c·∫ßu ph√¢n t√≠ch d·ªØ li·ªáu c≈©** ƒë√£ b·ªã thay th·∫ø/xo√° kh·ªèi `{context\_text}`, b·∫°n ph·∫£i tr·∫£ l·ªùi r√µ r√†ng: **"Y√™u c·∫ßu kh√¥ng th·ªÉ ho√†n th√†nh v√¨ d·ªØ li·ªáu/t·ªáp '[T√äN D·ªÆ LI·ªÜU/T·ªÜP C≈® N·∫æU C√ì TH·ªÇ X√ÅC ƒê·ªäNH]' kh√¥ng c√≤n n·∫±m trong khu v·ª±c d·ªØ li·ªáu hi·ªán t·∫°i."**
    * **Tuy·ªát ƒë·ªëi kh√¥ng** c·ªë g·∫Øng suy lu·∫≠n hay t√¨m ki·∫øm th√¥ng tin v·ªÅ t√†i li·ªáu kh√¥ng c√≥ trong `{context\_text}` hi·ªán t·∫°i.

---

### IV. Lu·∫≠t ·ª®ng x·ª≠ & ƒê·ªãnh d·∫°ng B·∫Øt bu·ªôc
1.  **Ng√¥n ng·ªØ & Phong c√°ch:** Tr·∫£ l·ªùi **Ti·∫øng Vi·ªát**. Phong c√°ch: **chuy√™n nghi·ªáp, kh√°ch quan, s√∫c t√≠ch**.
2.  **Giao ti·∫øp:** **Kh√¥ng ch√†o, kh√¥ng k·∫øt th√∫c, kh√¥ng d√πng t·ª´ ng·ªØ x√£ giao**.
3.  **ƒê·ªãnh d·∫°ng S·ªë li·ªáu (Chu·∫©n VN):**
    * M·ªçi gi√° tr·ªã ti·ªÅn t·ªá, doanh s·ªë, chi ph√≠ ph·∫£i ƒë∆∞·ª£c tr·∫£ l·ªùi v·ªõi ƒë∆°n v·ªã **VNƒê**.
    * **Con s·ªë v√† gi√° tr·ªã** ph·∫£i lu√¥n s·ª≠ d·ª•ng d·∫•u **ch·∫•m (.)** cho h√†ng ngh√¨n v√† d·∫•u **ph·∫©y (,)** cho ph·∫ßn th·∫≠p ph√¢n (V√≠ d·ª•: **10.000.000,00 VNƒê** ho·∫∑c **123.456**).
4.  **ƒê·ªãnh d·∫°ng Tr√¨nh b√†y:**
    * Khi so s√°nh/t·ªïng h·ª£p ‚Üí **b·∫Øt bu·ªôc d√πng b·∫£ng Markdown**.
    * Khi li·ªát k√™ ‚Üí d√πng **danh s√°ch c√≥ c·∫•u tr√∫c**.
    * L√†m n·ªïi b·∫≠t **th√¥ng tin quan tr·ªçng** b·∫±ng **in ƒë·∫≠m**.

""""",
        "max_tokens": 50000,
        "context_files": [],
        "domain": None,
        "is_history": True,
        "max_context_messages": 0,
        "using_document": True,
        "free_chat": False,
        "show_sources": True,
        "enable_streaming": True,
        "response_style": "concise",
        "language": "Vietnamese",
        "api_key": None,   # üëà th√™m d√≤ng n√†y
        "created_at": datetime.utcnow(),
        "updated_at": datetime.utcnow(),
    }

    cols = ",".join(default.keys())
    vals = ",".join([f":{k}" for k in default.keys()])
    await db.execute(text(f"INSERT INTO chat_settings ({cols}) VALUES ({vals})"), default)
    await db.commit()
    return default


# async def get_file_extracts(db: AsyncSession, file_ids: List[str]) -> List[str]:
#     if not file_ids:
#         return []
#     q = text("SELECT extracted_text FROM files WHERE id = ANY(:ids)")
#     result = await db.execute(q, {"ids": file_ids})
#     rows = result.fetchall()
#     return [row[0] for row in rows if row[0]]
async def get_file_extracts(
    db: AsyncSession,
    file_ids: List[str]
) -> List[str]:
    """
    Tr·∫£ v·ªÅ danh s√°ch chu·ªói ƒë√£ gh√©p: "original_file_name\nextracted_text"
    """
    if not file_ids:
        return []

    q = text("""
        SELECT original_file_name, extracted_text
        FROM files
        WHERE id = ANY(:ids)
    """)
    result = await db.execute(q, {"ids": file_ids})
    rows = result.fetchall()

    # N·ªëi t√™n file v√† n·ªôi dung, b·ªè qua h√†ng kh√¥ng c√≥ extracted_text
    return [
        f"{row[0]}\n{row[1]}"
        for row in rows
        if row[1]  # ch·ªâ l·∫•y khi c√≥ extracted_text
    ]


async def get_chat_history(db: AsyncSession, session_id: str, limit: int) -> List[str]:
    q = text("""
        SELECT sender_type, message_text
        FROM chat_messages
        WHERE session_id = :sid
        ORDER BY created_at DESC
        LIMIT :limit
    """)
    result = await db.execute(q, {"sid": session_id, "limit": limit})
    rows = result.fetchall()
    return [f"{r[0]}: {r[1]}" for r in reversed(rows)]


async def get_or_create_session(db: AsyncSession, session_id: str, user_id: str) -> str:
    q = text("SELECT id FROM chat_sessions WHERE id = :sid")
    result = await db.execute(q, {"sid": session_id})
    row = result.fetchone()
    if row:
        return row[0]

    await db.execute(text("""
        INSERT INTO chat_sessions (id, user_id, title)
        VALUES (:sid, :uid, :title)
    """), {"sid": session_id, "uid": user_id, "title": "New Session"})
    await db.commit()
    return session_id


# ---- MAIN CHAT SERVICE V2 ----
async def handle_chat_v2(payload: ChatRequest, db: AsyncSession) -> Dict[str, Any]:
    # 1. L·∫•y ho·∫∑c t·∫°o session (gi·ªØ nguy√™n ƒë·ªÉ qu·∫£n l√Ω l·ªãch s·ª≠)
    session_id = await get_or_create_session(db, payload.session_id, payload.user_id)

    # 2. L·∫•y ho·∫∑c t·∫°o chatsetting theo user_id (kh√¥ng c√≤n theo session_id)
    settings = await get_or_create_user_settings(db, payload.user_id)

    # 3. X·ª≠ l√Ω docs
    context_text = ""
    if settings["using_document"]:
        file_ids = [f.file_id for f in payload.files]
        extracts = await get_file_extracts(db, file_ids)
        context_text = "\n\n".join(extracts)
        # context_text = "\n\n".join(text for text, _ in extracts)
        # # ho·∫∑c b·∫°n c≈©ng c√≥ th·ªÉ d√πng original_file_name t√πy nhu c·∫ßu
        # file_names = [name for _, name in extracts]

    # 4. X·ª≠ l√Ω l·ªãch s·ª≠ (theo session_id nh∆∞ c≈©)
    history_text = ""
    if settings["is_history"]:
        limit = settings["max_context_messages"] or 15
        history = await get_chat_history(db, session_id, limit)
        history_text = "\n".join(history)

    # 5. Build final prompt
    final_prompt = f"""
{settings['system_prompt']}

{context_text}


### L·ªãch s·ª≠ tr√≤ chuy·ªán:
{history_text}

### Tin nh·∫Øn m·ªõi:
{payload.message} 
"""


    # 6. Call LLM (d√πng model t·ª´ user chatsettings, kh√¥ng l·∫•y env key c·ª©ng n·ªØa)
    llm = ChatOpenAI(model=settings["model"], temperature=0, api_key=settings.get("api_key") or os.getenv("OPENAI_API_KEY"),streaming=True)
    print("prompt", final_prompt)
    print("api key", settings.get("api_key"))


    # 7. Log user message
    user_msg_id = str(uuid.uuid4())
    await db.execute(text("""
        INSERT INTO chat_messages (id, session_id, sender_type, sender_id, message_text)
        VALUES (:id, :sid, 'user', :uid, :msg)
    """), {
        "id": user_msg_id,
        "sid": session_id,
        "uid": payload.user_id,
        "msg": payload.message
    })
    await db.commit()

    # 8. G·ªçi model
    response = await llm.ainvoke(final_prompt)

    # 9. Log assistant message
    bot_msg_id = str(uuid.uuid4())
    await db.execute(text("""
        INSERT INTO chat_messages (id, session_id, sender_type, message_text)
        VALUES (:id, :sid, 'assistant', :msg)
    """), {
        "id": bot_msg_id,
        "sid": session_id,
        "msg": response.content
    })
    await db.commit()
    return {
        "message": response.content,
        "used_files": payload.files if settings["show_sources"] else []
    }

async def get_chat_history_list(db: AsyncSession, user_id: str):
    """
    L·∫•y danh s√°ch c√°c session tr√≤ chuy·ªán c·ªßa m·ªôt ng∆∞·ªùi d√πng, 
    m·ªói session ch·ªâ hi·ªÉn th·ªã tin nh·∫Øn ƒë·∫ßu ti√™n.
    """
    # Truy v·∫•n c√°c session c·ªßa user, s·∫Øp x·∫øp theo th·ªùi gian ho·∫°t ƒë·ªông g·∫ßn nh·∫•t
    stmt = (
        select(ChatSession)
        .where(ChatSession.user_id == user_id)
        .order_by(desc(ChatSession.last_activity_at))
    )
    result = await db.execute(stmt)
    sessions = result.scalars().all()

    response_list = []
    for session in sessions:
        # T√¨m tin nh·∫Øn ƒë·∫ßu ti√™n c·ªßa m·ªói session
        message_stmt = (
            select(ChatMessage)
            .where(ChatMessage.session_id == session.id)
            .order_by(ChatMessage.created_at)
            .limit(1)
        )
        message_result = await db.execute(message_stmt)
        first_message = message_result.scalars().first()

        # Ch·ªâ th√™m session n·∫øu c√≥ tin nh·∫Øn
        if first_message:
            response_list.append({
                "session_id": str(session.id),
                "title": session.title,
                "first_message": first_message.message_text,
                "last_activity_at": session.last_activity_at.isoformat() if session.last_activity_at else None,
                "created_at": session.created_at.isoformat()
            })
    
    return response_list