import os
import json
import fitz  # PyMuPDF
# import cv2
import numpy as np
from PIL import Image
import requests
import base64
import tempfile
import logging
from pathlib import Path
from typing import Dict, List, Any, Optional, Tuple, Union, BinaryIO # MODIFIED: Added Any

# Custom exception for cancellation
class UploadCancelledError(Exception):
    """Custom exception to indicate that the upload was cancelled."""
    pass
from contextlib import contextmanager
from fastapi import HTTPException
from docx import Document  # python-docx ƒë·ªÉ ƒë·ªçc file Word
from pptx import Presentation  # python-pptx ƒë·ªÉ ƒë·ªçc file PowerPoint
import pandas as pd  # pandas ƒë·ªÉ ƒë·ªçc file Excel
import uuid
import time
from tenacity import retry, stop_after_attempt, wait_exponential, retry_if_exception_type, RetryError
from requests.exceptions import RequestException, Timeout, ConnectionError

# C·∫•u h√¨nh logging ch·ªâ xu·∫•t ra console
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

# C·∫•u h√¨nh Paddle OCR API
RETRY_MAX_ATTEMPTS = 3
RETRY_BACKOFF = 2

class OCRService:
    def __init__(self):
        self.supported_image_extensions = {'.png', '.jpg', '.jpeg', '.bmp', '.tiff', '.tif'}
        self.supported_pdf_extensions = {'.pdf'}
        self.supported_document_extensions = {'.docx', '.doc'}  # Word
        self.supported_presentation_extensions = {'.pptx', '.ppt'}  # PowerPoint
        self.supported_text_extensions = {'.txt'}  # Text files
        self.supported_excel_extensions = {'.xlsx', '.xls'}  # Excel files
        
        # C·∫•u h√¨nh Paddle OCR API t·ª´ .env file
        self.paddle_ocr_url = os.getenv("PADDLE_OCR_API_URL")
        if not self.paddle_ocr_url:
            raise ValueError("PADDLE_OCR_API_URL kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh trong file .env")
        
    @retry(
        stop=stop_after_attempt(RETRY_MAX_ATTEMPTS),
        wait=wait_exponential(multiplier=1, min=2, max=10),
        retry=retry_if_exception_type((RequestException, Timeout, ConnectionError)),
        reraise=True
    )
    def _call_ocr_api_with_retry(self, files: dict, data: dict, upload_id: Optional[str] = None, document_service: Optional[Any] = None) -> Dict[str, Any]:
        """G·ªçi OCR API v·ªõi c∆° ch·∫ø retry v√† ki·ªÉm tra h·ªßy."""
        # --- MODIFICATION: CHECK FOR CANCELLATION ---
        if upload_id and document_service and not document_service.get_upload_info(upload_id):
            raise UploadCancelledError(f"Upload {upload_id} was cancelled before calling API.")
        # --- END MODIFICATION ---
        try:
            response = requests.post(
                self.paddle_ocr_url,
                files=files,
                data=data,
                timeout=30,
                verify=False  # Ch·ªâ d√πng trong m√¥i tr∆∞·ªùng dev, kh√¥ng d√πng cho production
            )
            response.raise_for_status()
            return response.json()
            
        except requests.Timeout as e:
            print(f"‚è±Ô∏è  Timeout khi g·ªçi OCR API: {str(e)}")
            raise
        except requests.ConnectionError as e:
            print(f"üîå L·ªói k·∫øt n·ªëi ƒë·∫øn OCR API: {str(e)}")
            raise
        except requests.RequestException as e:
            print(f"‚ùå L·ªói khi g·ªçi OCR API: {str(e)}")
            raise

    def _process_ocr_result(self, api_result: Dict[str, Any]) -> Dict[str, Any]:
        """X·ª≠ l√Ω k·∫øt qu·∫£ OCR t·ª´ API"""
        try:
            ocr_results = api_result.get('result', [])
            full_text = []
            words_info = []
            
            # X·ª≠ l√Ω format t·ª´ ocr-fullV2
            for block in ocr_results:
                if isinstance(block, list):
                    for result in block:
                        if isinstance(result, list) and len(result) >= 2:
                            # result[0] ch·ª©a bounding box, result[1] ch·ª©a (text, confidence)
                            bbox = result[0]
                            text_info = result[1]
                            
                            if isinstance(text_info, list) and len(text_info) >= 2:
                                text = text_info[0]
                                confidence = float(text_info[1]) * 100  # Chuy·ªÉn v·ªÅ ph·∫ßn trƒÉm
                                
                                full_text.append(text)
                                words_info.append({
                                    'text': text,
                                    'confidence': int(confidence),
                                    'bbox': {
                                        'x': int(bbox[0][0]),
                                        'y': int(bbox[0][1]),
                                        'width': int(bbox[2][0] - bbox[0][0]),
                                        'height': int(bbox[2][1] - bbox[0][1])
                                    }
                                })
            
            # In k·∫øt qu·∫£ OCR ra console
            extracted_text = '\n'.join(full_text)
            
            return {
                'success': True,
                'text': extracted_text,
                'words': words_info,
                'total_words': len(words_info),
                'average_confidence': sum(w['confidence'] for w in words_info) / len(words_info) if words_info else 0
            }
            
        except Exception as e:
            print(f"‚ùå L·ªói khi x·ª≠ l√Ω k·∫øt qu·∫£ OCR: {str(e)}")
            return {
                'success': False,
                'error': f'L·ªói x·ª≠ l√Ω k·∫øt qu·∫£ OCR: {str(e)}',
                'text': '',
                'words': [],
                'total_words': 0,
                'average_confidence': 0
            }

    @contextmanager
    def _temp_image_file(self, image_data: Union[bytes, BinaryIO], suffix: str = '.png') -> str:
        """T·∫°o file t·∫°m t·ª´ d·ªØ li·ªáu ·∫£nh v√† t·ª± ƒë·ªông x√≥a sau khi s·ª≠ d·ª•ng"""
        temp_file = None
        try:
            with tempfile.NamedTemporaryFile(delete=False, suffix=suffix) as temp:
                if isinstance(image_data, bytes):
                    temp.write(image_data)
                else:
                    temp.write(image_data.read())
                temp_file = temp.name
            yield temp_file
        finally:
            if temp_file and os.path.exists(temp_file):
                try:
                    os.unlink(temp_file)
                except Exception as e:
                    logger.warning(f"Kh√¥ng th·ªÉ x√≥a file t·∫°m {temp_file}: {e}")

    def _ocr_image_from_bytes(self, image_data: Union[bytes, BinaryIO], file_name: str = 'image.png', upload_id: Optional[str] = None, document_service: Optional[Any] = None) -> Dict[str, Any]:
        """X·ª≠ l√Ω OCR t·ª´ d·ªØ li·ªáu ·∫£nh d·∫°ng bytes ho·∫∑c file-like object"""
        with self._temp_image_file(image_data) as temp_file_path:
            return self._call_paddle_ocr_api(temp_file_path, file_name, upload_id=upload_id, document_service=document_service)

    def _call_paddle_ocr_api(self, image_path: str, file_name: str = None, upload_id: Optional[str] = None, document_service: Optional[Any] = None) -> Dict[str, Any]:
        """G·ªçi Paddle OCR API ƒë·ªÉ tr√≠ch xu·∫•t text t·ª´ h√¨nh ·∫£nh v·ªõi c∆° ch·∫ø retry"""
        if not file_name:
            file_name = os.path.basename(image_path)
            
        try:
            # Chu·∫©n b·ªã file v√† form data cho API
            with open(image_path, "rb") as image_file:
                files = {
                    'file': (file_name, image_file, 'image/png')
                }
                data = {
                    'model': 'paddle',
                    'lang': 'vie'
                }
                
                # G·ªçi API v·ªõi endpoint ƒë√£ c·∫•u h√¨nh
                logger.info(f"G·ªçi OCR API: {self.paddle_ocr_url}")
                logger.debug(f"D·ªØ li·ªáu g·ª≠i ƒëi: {data}")
                
                # G·ªçi API v·ªõi retry v√† ki·ªÉm tra h·ªßy
                api_result = self._call_ocr_api_with_retry(files, data, upload_id=upload_id, document_service=document_service)
                
                # X·ª≠ l√Ω k·∫øt qu·∫£
                return self._process_ocr_result(api_result)
                
        except (RetryError, UploadCancelledError) as e: # MODIFIED: Catch UploadCancelledError
            if isinstance(e, UploadCancelledError):
                logger.info(str(e))
                raise # Re-raise to be caught by the calling function

            print(f"‚ùå ƒê√£ th·ª≠ l·∫°i {RETRY_MAX_ATTEMPTS} l·∫ßn nh∆∞ng v·∫´n l·ªói: {str(e)}")
            return {
                'success': False,
                'error': f'OCR processing failed after {RETRY_MAX_ATTEMPTS} attempts: {str(e)}',
                'text': '',
                'words': [],
                'total_words': 0,
                'average_confidence': 0,
                'retry_count': RETRY_MAX_ATTEMPTS
            }
                
        except Exception as e:
            print(f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh khi g·ªçi OCR API: {str(e)}")
            return {
                'success': False,
                'error': f'Unexpected error during OCR processing: {str(e)}',
                'text': '',
                'words': [],
                'total_words': 0,
                'average_confidence': 0,
                'retry_count': 0 # MODIFIED: retry_count was not defined here
            }
        
    def extract_text_from_image(self, image_path: str, upload_id: Optional[str] = None, document_service: Optional[Any] = None) -> Dict[str, Any]:
        """Tr√≠ch xu·∫•t text t·ª´ h√¨nh ·∫£nh s·ª≠ d·ª•ng Paddle OCR API"""
        try:
            print(f"ƒêang x·ª≠ l√Ω h√¨nh ·∫£nh v·ªõi Paddle OCR: {os.path.basename(image_path)}")
            
            # Ki·ªÉm tra file t·ªìn t·∫°i
            if not os.path.exists(image_path):
                raise HTTPException(status_code=400, detail="File h√¨nh ·∫£nh kh√¥ng t·ªìn t·∫°i")
            
            # G·ªçi Paddle OCR API v·ªõi tham s·ªë h·ªßy
            result = self._call_paddle_ocr_api(image_path, upload_id=upload_id, document_service=document_service)
            
            # In chi ti·∫øt k·∫øt qu·∫£ OCR
            if result.get('success', False):
                print(f"\n=== X·ª¨ L√ù H√åNH ·∫¢NH: {os.path.basename(image_path)} ===")
                print(f"ƒê√£ tr√≠ch xu·∫•t th√†nh c√¥ng {result.get('total_words', 0)} t·ª´")
                if result.get('text'):
                    print(f"N·ªôi dung: {result.get('text')[:300]}{'...' if len(result.get('text', '')) > 300 else ''}")
                else:
                    print("C·∫¢NH B√ÅO: Kh√¥ng c√≥ text n√†o ƒë∆∞·ª£c tr√≠ch xu·∫•t t·ª´ h√¨nh ·∫£nh!")
                print(f"=== K·∫æT TH√öC X·ª¨ L√ù ===\n")
            else:
                print(f"\n=== L·ªñI X·ª¨ L√ù H√åNH ·∫¢NH: {os.path.basename(image_path)} ===")
                print(f"L·ªói: {result.get('error', 'Kh√¥ng x√°c ƒë·ªãnh')}")
                print(f"=== K·∫æT TH√öC L·ªñI ===\n")
            
            return result
            
        except Exception as e:
            print(f"\n=== EXCEPTION X·ª¨ L√ù H√åNH ·∫¢NH: {os.path.basename(image_path) if image_path else 'Unknown'} ===")
            print(f"Exception: {str(e)}")
            print(f"=== K·∫æT TH√öC EXCEPTION ===\n")
            return {
                'success': False,
                'error': str(e),
                'text': '',
                'words': [],
                'total_words': 0,
                'average_confidence': 0
            }
    
    def _process_pdf_page(self, page, page_num: int, is_image: bool = False, upload_id: Optional[str] = None, document_service: Optional[Any] = None) -> Dict[str, Any]:
        """X·ª≠ l√Ω m·ªôt trang PDF ri√™ng l·∫ª"""
        try:
            # --- MODIFICATION: CHECK FOR CANCELLATION ---
            if upload_id and document_service and not document_service.get_upload_info(upload_id):
                raise UploadCancelledError(f"Upload {upload_id} was cancelled during PDF processing.")
            # --- END MODIFICATION ---

            page_text = page.get_text()
            images = page.get_images()
            has_images = len(images) > 0
            has_text = bool(page_text.strip())
            
            # N·∫øu kh√¥ng c√≥ h√¨nh ·∫£nh ho·∫∑c kh√¥ng y√™u c·∫ßu OCR, tr·∫£ v·ªÅ text g·ªëc
            if not has_images or not is_image:
                return {
                    'page_number': page_num + 1,
                    'text': page_text if has_text else '',
                    'has_images': has_images,
                    'has_text': has_text,
                    'success': True
                }
            
            # N·∫øu c√≥ h√¨nh ·∫£nh v√† y√™u c·∫ßu OCR
            try:
                # T·∫°o h√¨nh ·∫£nh t·ª´ trang PDF
                pix = page.get_pixmap()
                with self._temp_image_file(pix.tobytes("png")) as temp_img_path:
                    # Th·ª±c hi·ªán OCR v·ªõi Paddle OCR API
                    ocr_result = self._call_paddle_ocr_api(temp_img_path, f"page_{page_num + 1}.png", upload_id=upload_id, document_service=document_service)
                    ocr_text = ocr_result.get('text', '') if ocr_result.get('success', False) else ''
                    
                    # K·∫øt h·ª£p text g·ªëc v√† text t·ª´ OCR n·∫øu c·∫ßn
                    if has_text:
                        combined_text = f"{page_text}\n{ocr_text}"
                    else:
                        combined_text = ocr_text
                    
                    return {
                        'page_number': page_num + 1,
                        'text': combined_text,
                        'has_images': has_images,
                        'has_text': has_text or bool(ocr_text.strip()),
                        'ocr_raw_response': ocr_result,
                        'ocr_extracted_text': ocr_text,
                        'success': True
                    }
                    
            except Exception as ocr_error:
                logger.error(f"L·ªói OCR trang {page_num + 1}: {str(ocr_error)}")
                # N·∫øu c√≥ l·ªói OCR nh∆∞ng c√≥ text g·ªëc, v·∫´n tr·∫£ v·ªÅ text g·ªëc
                if has_text:
                    return {
                        'page_number': page_num + 1,
                        'text': page_text,
                        'has_images': has_images,
                        'has_text': True,
                        'ocr_error': str(ocr_error),
                        'success': True
                    }
                raise  # N√©m l·ªói n·∫øu kh√¥ng c√≥ text g·ªëc
                
        except Exception as e:
            logger.error(f"L·ªói khi x·ª≠ l√Ω trang {page_num + 1}: {str(e)}")
            return {
                'page_number': page_num + 1,
                'text': '',
                'has_images': False,
                'has_text': False,
                'error': str(e),
                'success': False
            }

    def extract_text_from_pdf(self, pdf_path: str, is_image: bool = False, upload_id: Optional[str] = None, document_service: Optional[Any] = None) -> Dict[str, Any]:
        """Tr√≠ch xu·∫•t text t·ª´ PDF v·ªõi x·ª≠ l√Ω th√¥ng minh cho t·ª´ng trang"""
        doc = None
        try:
            doc = fitz.open(pdf_path)
            full_text = []
            pages_info = []
            total_pages = len(doc)

            logger.info(f"B·∫Øt ƒë·∫ßu tr√≠ch xu·∫•t text t·ª´ PDF '{os.path.basename(pdf_path)}' v·ªõi {total_pages} trang...")

            # X·ª≠ l√Ω t·ª´ng trang
            for page_num in range(total_pages):
                try:
                    page = doc[page_num]
                    page_result = self._process_pdf_page(page, page_num, is_image, upload_id=upload_id, document_service=document_service)
                    
                    if page_result['success']:
                        full_text.append(page_result['text'])
                        pages_info.append(page_result)
                        
                        # Log ti·∫øn ƒë·ªô
                        if (page_num + 1) % 10 == 0 or (page_num + 1) == total_pages:
                            logger.info(f"ƒê√£ x·ª≠ l√Ω {page_num + 1}/{total_pages} trang")
                    else:
                        logger.warning(f"Kh√¥ng th·ªÉ x·ª≠ l√Ω trang {page_num + 1}: {page_result.get('error', 'L·ªói kh√¥ng x√°c ƒë·ªãnh')}")
                        pages_info.append(page_result)
                        
                except Exception as e:
                    logger.error(f"L·ªói kh√¥ng x·ª≠ l√Ω ƒë∆∞·ª£c trang {page_num + 1}: {str(e)}")
                    pages_info.append({
                        'page_number': page_num + 1,
                        'text': '',
                        'has_images': False,
                        'has_text': False,
                        'error': str(e),
                        'success': False
                    })

            # T·∫°o k·∫øt qu·∫£ cu·ªëi c√πng
            final_text = '\n\n'.join(filter(None, full_text))
            result = {
                'success': True,
                'text': final_text,
                'pages': pages_info,
                'total_pages': total_pages,
                'total_words': len(final_text.split()) if final_text else 0,
                'processed_pages': len([p for p in pages_info if p.get('success', False)])
            }
            
            logger.info(f"Ho√†n th√†nh x·ª≠ l√Ω PDF. ƒê√£ x·ª≠ l√Ω th√†nh c√¥ng {result['processed_pages']}/{total_pages} trang")
            return result
            
        except Exception as e:
            error_msg = f"L·ªói khi x·ª≠ l√Ω file PDF: {str(e)}"
            logger.error(error_msg, exc_info=True)
            return {
                'success': False,
                'error': error_msg,
                'text': '',
                'pages': [],
                'total_pages': 0,
                'total_words': 0,
                'processed_pages': 0
            }
            
        finally:
            if doc:
                doc.close()

    
    def extract_text_from_docx(self, file_path: str, is_image: bool = False, upload_id: Optional[str] = None, document_service: Optional[Any] = None) -> Dict[str, Any]:
        """Tr√≠ch xu·∫•t text t·ª´ file Word v·ªõi x·ª≠ l√Ω th√¥ng minh text + OCR"""
        try:
            doc = Document(file_path)
            full_text = []
            sections_info = []

            logger.info(f"B·∫Øt ƒë·∫ßu x·ª≠ l√Ω file Word: {os.path.basename(file_path)}")

            # X·ª≠ l√Ω paragraphs
            paragraph_texts = []
            for i, paragraph in enumerate(doc.paragraphs):
                if paragraph.text.strip():
                    paragraph_texts.append(paragraph.text.strip())

            # X·ª≠ l√Ω tables
            table_texts = []
            for table_idx, table in enumerate(doc.tables):
                table_content = []
                for row in table.rows:
                    row_content = []
                    for cell in row.cells:
                        if cell.text.strip():
                            row_content.append(cell.text.strip())
                    if row_content:
                        table_content.append(' | '.join(row_content))
                if table_content:
                    table_texts.append('\n'.join(table_content))

            # X·ª≠ l√Ω images v·ªõi OCR
            image_texts = []
            has_images = False
            try:
                for rel in doc.part.rels.values():
                    if "image" in rel.target_ref:
                        has_images = True
                        try:
                            # --- MODIFICATION: CHECK FOR CANCELLATION ---
                            if upload_id and document_service and not document_service.get_upload_info(upload_id):
                                raise UploadCancelledError(f"Upload {upload_id} was cancelled during DOCX processing.")
                            # --- END MODIFICATION ---

                            # S·ª≠ d·ª•ng _ocr_image_from_bytes thay v√¨ x·ª≠ l√Ω file t·∫°m
                            ocr_result = self._ocr_image_from_bytes(
                                rel.target_part.blob,
                                f"docx_image_{len(image_texts)}.png",
                                upload_id=upload_id, 
                                document_service=document_service
                            )
                            if ocr_result.get('success', False) and ocr_result.get('text'):
                                image_texts.append(ocr_result['text'])
                        except Exception as img_e:
                            logger.warning(f"L·ªói khi x·ª≠ l√Ω ·∫£nh trong docx: {str(img_e)}")
                            continue
            except Exception as e:
                logger.error(f"L·ªói khi truy c·∫≠p c√°c m·ªëi quan h·ªá trong docx: {str(e)}", exc_info=True)

            # K·∫øt h·ª£p t·∫•t c·∫£ text
            all_texts = []
            if paragraph_texts:
                all_texts.extend(paragraph_texts)
            if table_texts:
                all_texts.extend(table_texts)
            if image_texts:
                all_texts.extend(image_texts)

            final_text = '\n\n'.join(all_texts)

            result = {
                'success': True,
                'text': final_text,
                'total_words': len(final_text.split()),
                'sections': {
                    'paragraphs': len(paragraph_texts),
                    'tables': len(table_texts),
                    'images': len(image_texts)
                },
                'has_images': has_images,
                'processing_summary': {
                    'paragraph_text_extracted': len(paragraph_texts) > 0,
                    'table_text_extracted': len(table_texts) > 0,
                    'image_ocr_performed': len(image_texts) > 0
                }
            }

            logger.info(f"Ho√†n th√†nh x·ª≠ l√Ω file Word. T·ªïng s·ªë t·ª´: {result['total_words']}")
            return result

        except Exception as e:
            error_msg = f"L·ªói khi x·ª≠ l√Ω file Word: {str(e)}"
            logger.error(error_msg, exc_info=True)
            return {
                'success': False,
                'error': error_msg,
                'text': '',
                'total_words': 0
            }
    
    def extract_text_from_pptx(self, file_path: str, is_image: bool = False, upload_id: Optional[str] = None, document_service: Optional[Any] = None) -> Dict[str, Any]:
        """Tr√≠ch xu·∫•t text t·ª´ file PowerPoint v·ªõi x·ª≠ l√Ω th√¥ng minh text + OCR"""
        try:
            logger.info(f"B·∫Øt ƒë·∫ßu x·ª≠ l√Ω file PowerPoint: {os.path.basename(file_path)}")
            prs = Presentation(file_path)
            total_slides = len(prs.slides)
            all_slide_texts = []
            slides_info = []
            
            logger.info(f"T·ªïng s·ªë slide c·∫ßn x·ª≠ l√Ω: {total_slides}")
            
            for slide_idx, slide in enumerate(prs.slides):
                try:
                    # --- MODIFICATION: CHECK FOR CANCELLATION ---
                    if upload_id and document_service and not document_service.get_upload_info(upload_id):
                        raise UploadCancelledError(f"Upload {upload_id} was cancelled during PPTX processing.")
                    # --- END MODIFICATION ---

                    slide_text_parts = []
                    slide_image_texts = []
                    has_images = False
                    
                    # X·ª≠ l√Ω text shapes
                    for shape in slide.shapes:
                        try:
                            if hasattr(shape, "text") and shape.text.strip():
                                slide_text_parts.append(shape.text.strip())
                            
                            # Ki·ªÉm tra v√† x·ª≠ l√Ω images n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu
                            if is_image and hasattr(shape, 'image') and hasattr(shape, 'shape_type') and shape.shape_type == 13:  # Picture type
                                has_images = True
                                try:
                                    # S·ª≠ d·ª•ng _ocr_image_from_bytes ƒë·ªÉ x·ª≠ l√Ω ·∫£nh
                                    ocr_result = self._ocr_image_from_bytes(
                                        shape.image.blob,
                                        f"pptx_slide_{slide_idx + 1}_img_{len(slide_image_texts)}.png",
                                        upload_id=upload_id, 
                                        document_service=document_service
                                    )
                                    if ocr_result.get('success', False) and ocr_result.get('text'):
                                        slide_image_texts.append(ocr_result['text'])
                                        logger.debug(f"ƒê√£ x·ª≠ l√Ω ·∫£nh {len(slide_image_texts)} trong slide {slide_idx + 1}")
                                        
                                except Exception as img_e:
                                    logger.warning(f"L·ªói khi x·ª≠ l√Ω ·∫£nh trong slide {slide_idx + 1}: {str(img_e)}")
                                    continue
                                    
                        except Exception as shape_e:
                            logger.warning(f"L·ªói khi x·ª≠ l√Ω shape trong slide {slide_idx + 1}: {str(shape_e)}")
                            continue
                    
                    # K·∫øt h·ª£p text v√† OCR cho slide n√†y
                    slide_all_text = []
                    if slide_text_parts:
                        slide_all_text.extend(slide_text_parts)
                    if slide_image_texts:
                        slide_all_text.append("=== N·ªòI DUNG T·ª™ H√åNH ·∫¢NH ===")
                        slide_all_text.extend(slide_image_texts)
                    
                    slide_final_text = '\n'.join(slide_all_text)
                    
                    # Log ti·∫øn ƒë·ªô
                    if (slide_idx + 1) % 5 == 0 or (slide_idx + 1) == total_slides:
                        logger.info(f"ƒê√£ x·ª≠ l√Ω {slide_idx + 1}/{total_slides} slide")
                    
                    # L∆∞u th√¥ng tin slide
                    slide_info = {
                        'slide_number': slide_idx + 1,
                        'text': slide_final_text,
                        'has_text': len(slide_text_parts) > 0,
                        'has_images': has_images,
                        'text_shapes_count': len(slide_text_parts),
                        'images_ocr_count': len(slide_image_texts),
                        'success': True
                    }
                    
                    slides_info.append(slide_info)
                    
                    if slide_final_text:
                        all_slide_texts.append(slide_final_text)
                        
                except Exception as slide_e:
                    error_msg = f"L·ªói khi x·ª≠ l√Ω slide {slide_idx + 1}: {str(slide_e)}"
                    logger.error(error_msg, exc_info=True)
                    slides_info.append({
                        'slide_number': slide_idx + 1,
                        'error': error_msg,
                        'has_text': False,
                        'has_images': False,
                        'success': False
                    })
            
            # T·∫°o k·∫øt qu·∫£ cu·ªëi c√πng
            final_text = '\n\n'.join(all_slide_texts)
            
            result = {
                'success': True,
                'text': final_text,
                'total_slides': total_slides,
                'total_words': len(final_text.split()),
                'slides': slides_info,
                'processing_summary': {
                    'slides_processed': len(slides_info),
                    'slides_with_text': len([s for s in slides_info if s.get('has_text', False)]),
                    'slides_with_images': len([s for s in slides_info if s.get('has_images', False)]),
                    'total_images_processed': sum(s.get('images_ocr_count', 0) for s in slides_info)
                }
            }
            
            logger.info(
                f"Ho√†n th√†nh x·ª≠ l√Ω PowerPoint. "
                f"T·ªïng s·ªë slide: {result['total_slides']}, "
                f"T·ªïng s·ªë t·ª´: {result['total_words']}, "
                f"S·ªë ·∫£nh ƒë√£ x·ª≠ l√Ω: {result['processing_summary']['total_images_processed']}"
            )
            
            return result
            
        except Exception as e:
            error_msg = f"L·ªói khi x·ª≠ l√Ω file PowerPoint: {str(e)}"
            logger.error(error_msg, exc_info=True)
            return {
                'success': False,
                'error': error_msg,
                'text': '',
                'total_slides': 0,
                'total_words': 0,
                'slides': []
            }

    
    def extract_text_from_txt(self, file_path: str) -> Dict[str, Any]:
        """ƒê·ªçc n·ªôi dung t·ª´ file text"""
        try:
            print("ƒêang ƒë·ªçc file text...")
            with open(file_path, 'r', encoding='utf-8') as f:
                text = f.read()
            
            return {
                'success': True,
                'text': text,
                'total_words': len(text.split())
            }
            
        except UnicodeDecodeError:
            # Th·ª≠ l·∫°i v·ªõi encoding kh√°c n·∫øu utf-8 kh√¥ng ƒë·ªçc ƒë∆∞·ª£c
            try:
                with open(file_path, 'r', encoding='latin-1') as f:
                    text = f.read()
                return {
                    'success': True,
                    'text': text,
                    'total_words': len(text.split())
                }
            except Exception as e:
                return {
                    'success': False,
                    'error': str(e),
                    'text': '',
                    'total_words': 0
                }
        except Exception as e:
            return {
                'success': False,
                'error': str(e),
                'text': '',
                'total_words': 0
            }
    
    def extract_text_from_excel(self, file_path: str, is_image: bool = False, upload_id: Optional[str] = None, document_service: Optional[Any] = None) -> Dict[str, Any]:
        """Tr√≠ch xu·∫•t text t·ª´ file Excel v·ªõi x·ª≠ l√Ω th√¥ng minh text + OCR"""
        try:
            # ƒê·ªçc t·∫•t c·∫£ c√°c sheet
            excel_file = pd.ExcelFile(file_path)
            all_sheets_text = []
            sheets_info = []
            
            for sheet_name in excel_file.sheet_names:
                # --- MODIFICATION: CHECK FOR CANCELLATION ---
                if upload_id and document_service and not document_service.get_upload_info(upload_id):
                    raise UploadCancelledError(f"Upload {upload_id} was cancelled during Excel processing.")
                # --- END MODIFICATION ---

                df = pd.read_excel(excel_file, sheet_name=sheet_name)
                
                # X·ª≠ l√Ω text data t·ª´ cells
                sheet_text_parts = []
                
                # Th√™m t√™n sheet
                sheet_text_parts.append(f"=== SHEET: {sheet_name} ===")
                
                # X·ª≠ l√Ω headers
                if not df.empty:
                    headers = [str(col) for col in df.columns if str(col) != 'nan']
                    if headers:
                        sheet_text_parts.append("Headers: " + " | ".join(headers))
                
                # X·ª≠ l√Ω data rows
                for index, row in df.iterrows():
                    row_data = []
                    for col in df.columns:
                        cell_value = row[col]
                        if pd.notna(cell_value) and str(cell_value).strip():
                            row_data.append(str(cell_value).strip())
                    
                    if row_data:
                        sheet_text_parts.append(" | ".join(row_data))
                
                # X·ª≠ l√Ω images trong Excel (n·∫øu c√≥)
                sheet_image_texts = []
                has_images = False
                
                try:
                    # Ki·ªÉm tra images trong workbook
                    from openpyxl import load_workbook
                    wb = load_workbook(file_path)
                    
                    if sheet_name in wb.sheetnames:
                        ws = wb[sheet_name]
                        
                        # T√¨m images trong sheet
                        if hasattr(ws, '_images') and ws._images:
                            has_images = True
                            
                            for img_idx, img in enumerate(ws._images):
                                try:
                                    # L∆∞u image t·∫°m th·ªùi
                                    temp_img_path = f"temp_excel_{sheet_name}_{img_idx}.png"
                                    
                                    # L∆∞u image data
                                    with open(temp_img_path, "wb") as f:
                                        f.write(img._data())
                                    
                                    # OCR image
                                    ocr_result = self._call_paddle_ocr_api(temp_img_path, upload_id=upload_id, document_service=document_service)
                                    if ocr_result.get('success', False) and ocr_result.get('text'):
                                        sheet_image_texts.append(ocr_result['text'])
                                    
                                    # X√≥a file t·∫°m
                                    if os.path.exists(temp_img_path):
                                        os.remove(temp_img_path)
                                        
                                except Exception:
                                    continue
                                    
                except Exception:
                    # N·∫øu kh√¥ng th·ªÉ x·ª≠ l√Ω images, ti·∫øp t·ª•c v·ªõi text
                    pass
                
                # K·∫øt h·ª£p text v√† OCR cho sheet n√†y
                sheet_all_text = []
                if sheet_text_parts:
                    sheet_all_text.extend(sheet_text_parts)
                if sheet_image_texts:
                    sheet_all_text.append("=== OCR FROM IMAGES ===")
                    sheet_all_text.extend(sheet_image_texts)
                
                sheet_final_text = '\n'.join(sheet_all_text)
                if sheet_final_text:
                    all_sheets_text.append(sheet_final_text)
                
                sheets_info.append({
                    'sheet_name': sheet_name,
                    'text': sheet_final_text,
                    'rows_count': len(df),
                    'columns_count': len(df.columns),
                    'has_images': has_images,
                    'images_ocr_count': len(sheet_image_texts),
                    'has_data': not df.empty
                })
            
            final_text = '\n\n'.join(all_sheets_text)
            
            return {
                'success': True,
                'text': final_text,
                'total_words': len(final_text.split()),
                'sheets': sheets_info,
                'processing_summary': {
                    'total_sheets': len(excel_file.sheet_names),
                    'sheets_with_data': len([s for s in sheets_info if s['has_data']]),
                    'sheets_with_images': len([s for s in sheets_info if s['has_images']]),
                    'total_images_processed': sum(s['images_ocr_count'] for s in sheets_info)
                }
            }
            
        except Exception as e:
            return {
                'success': False,
                'error': str(e),
                'text': '',
                'sheets': [],
                'total_words': 0
            }

    def _extract_text_from_excel_images(self, file_path: str) -> Dict[str, Any]:
        """Tr√≠ch xu·∫•t text t·ª´ h√¨nh ·∫£nh trong file Excel b·∫±ng OCR"""
        try:
            print("ƒêang x·ª≠ l√Ω h√¨nh ·∫£nh trong file Excel...")
            workbook = load_workbook(file_path)
            full_text = []
            sheets_data = []
            image_count = 0
            temp_dir = Path("temp_excel_images")
            temp_dir.mkdir(exist_ok=True)

            for sheet_name in workbook.sheetnames:
                sheet = workbook[sheet_name]
                sheet_text = []
                sheet_images = []

                # L·∫•y text th√¥ng th∆∞·ªùng tr∆∞·ªõc
                for row in sheet.iter_rows():
                    row_text = []
                    for cell in row:
                        if cell.value:
                            row_text.append(str(cell.value))
                    if row_text:
                        sheet_text.extend(row_text)

                # X·ª≠ l√Ω h√¨nh ·∫£nh trong sheet (n·∫øu c√≥)
                try:
                    # Ki·ªÉm tra xem sheet c√≥ h√¨nh ·∫£nh kh√¥ng
                    if hasattr(sheet, '_images') and sheet._images:
                        for img in sheet._images:
                            try:
                                image_count += 1
                                temp_path = temp_dir / f"excel_image_{image_count}.png"
                                
                                # L∆∞u h√¨nh ·∫£nh
                                with open(temp_path, "wb") as f:
                                    f.write(img._data())

                                # OCR h√¨nh ·∫£nh v·ªõi Paddle OCR API
                                ocr_result = self._call_paddle_ocr_api(str(temp_path))
                                if ocr_result['success'] and ocr_result['text']:
                                    print(f"\n=== OCR H√åNH ·∫¢NH EXCEL #{image_count} ===")
                                    print(f"Sheet: {sheet_name}")
                                    print(f"N·ªôi dung: {ocr_result['text'][:200]}{'...' if len(ocr_result['text']) > 200 else ''}")
                                    print(f"=== K·∫æT TH√öC H√åNH ·∫¢NH #{image_count} ===\n")
                                    sheet_images.append({
                                        'image_id': image_count,
                                        'text': ocr_result['text']
                                    })
                                    sheet_text.append(ocr_result['text'])

                            except Exception as e:
                                print(f"L·ªói khi x·ª≠ l√Ω ·∫£nh {image_count}: {str(e)}")
                except Exception as e:
                    print(f"Kh√¥ng th·ªÉ truy c·∫≠p h√¨nh ·∫£nh trong sheet {sheet_name}: {str(e)}")

                # Th√™m k·∫øt qu·∫£ c·ªßa sheet v√†o danh s√°ch
                if sheet_text:
                    sheets_data.append({
                        'sheet_name': sheet_name,
                        'text': '\n'.join(sheet_text),
                        'images': sheet_images
                    })
                    full_text.append(f"Sheet: {sheet_name}")
                    full_text.extend(sheet_text)

            # X√≥a th∆∞ m·ª•c t·∫°m n·∫øu t·ªìn t·∫°i
            if temp_dir.exists():
                for item in temp_dir.iterdir():
                    item.unlink()
                temp_dir.rmdir()

            text = '\n\n'.join(full_text)
            return {
                'success': True,
                'text': text,
                'sheets': sheets_data,
                'total_sheets': len(sheets_data),
                'total_images': image_count,
                'total_words': len(text.split())
            }

        except Exception as e:
            return {
                'success': False,
                'error': str(e),
                'text': '',
                'sheets': [],
                'total_sheets': 0,
                'total_images': 0,
                'total_words': 0
            }

    def process_file(self, file_path: str, is_image: bool = False, upload_id: Optional[str] = None, document_service: Optional[Any] = None) -> Dict[str, Any]:
        """X·ª≠ l√Ω file d·ª±a tr√™n extension v√† tr·∫£ v·ªÅ k·∫øt qu·∫£ OCR"""
        # --- MODIFICATION: CHECK FOR CANCELLATION AT THE START ---
        if upload_id and document_service and not document_service.get_upload_info(upload_id):
            raise UploadCancelledError(f"Upload {upload_id} was cancelled before processing.")
        # --- END MODIFICATION ---

        file_path = Path(file_path)
        
        if not file_path.exists():
            raise HTTPException(status_code=404, detail="File kh√¥ng t·ªìn t·∫°i")
        
        file_extension = file_path.suffix.lower()
        
        try:
            # X·ª≠ l√Ω PDF
            if file_extension in self.supported_pdf_extensions:
                result = self.extract_text_from_pdf(str(file_path), is_image, upload_id=upload_id, document_service=document_service)
                result['file_type'] = 'pdf'
            
            # X·ª≠ l√Ω h√¨nh ·∫£nh
            elif file_extension in self.supported_image_extensions:
                result = self.extract_text_from_image(str(file_path), upload_id=upload_id, document_service=document_service)
                result['file_type'] = 'image'
            
            # X·ª≠ l√Ω Word
            elif file_extension in self.supported_document_extensions:
                result = self.extract_text_from_docx(str(file_path), is_image, upload_id=upload_id, document_service=document_service)
                result['file_type'] = 'word'
            
            # X·ª≠ l√Ω PowerPoint
            elif file_extension in self.supported_presentation_extensions:
                result = self.extract_text_from_pptx(str(file_path), is_image, upload_id=upload_id, document_service=document_service)
                result['file_type'] = 'powerpoint'
            
            # X·ª≠ l√Ω Excel
            elif file_extension in self.supported_excel_extensions:
                result = self.extract_text_from_excel(str(file_path), is_image, upload_id=upload_id, document_service=document_service)
                result['file_type'] = 'excel'
            
            # X·ª≠ l√Ω Text
            elif file_extension in self.supported_text_extensions:
                result = self.extract_text_from_txt(str(file_path))
                result['file_type'] = 'text'
            
            else:
                supported_extensions = (
                    self.supported_pdf_extensions |
                    self.supported_image_extensions |
                    self.supported_document_extensions |
                    self.supported_presentation_extensions |
                    self.supported_excel_extensions |
                    self.supported_text_extensions
                )
                raise HTTPException(
                    status_code=400,
                    detail=f"ƒê·ªãnh d·∫°ng file kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£. H·ªó tr·ª£: {', '.join(supported_extensions)}"
                )
            
            result['file_name'] = file_path.name
            return result
            
        except HTTPException:
            raise
        except Exception as e:
            raise HTTPException(status_code=500, detail=f"L·ªói x·ª≠ l√Ω file: {str(e)}")

# Kh·ªüi t·∫°o service
ocr_service = OCRService()